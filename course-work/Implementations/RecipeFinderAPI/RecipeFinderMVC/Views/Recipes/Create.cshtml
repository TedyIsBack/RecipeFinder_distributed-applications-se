@model RecipeFinderMVC.Models.Recipes.CreateRecipeModel

@{
    ViewData["Title"] = "Create Recipe";
}
@Html.ValidationMessage("CustomError")

<h2>Create Recipe</h2>
@Html.ValidationMessage("ErrorMessage", "", new { @class = "text-danger" })
<form action="/Recipes/Create" method="post" enctype="multipart/form-data">
    <div>
        <label for="Name">Recipe Name</label>
        <input type="text" name="Name" id="Name" class="form-control" value="@Model?.Name" />
        @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
    </div>

    <div>
        <label for="Description">Description</label>
        <textarea name="Description" id="Description" class="form-control">@Model?.Description</textarea>
        @Html.ValidationMessageFor(x => x.Description, "", new { @class = "text-danger" })
    </div>

    <div>
        <label for="PreparationTime">Preparation Time (in minutes)</label>
        <input type="number" name="PreparationTime" id="PreparationTime" class="form-control" value="@Model?.PreparationTime" />
        @Html.ValidationMessageFor(x => x.PreparationTime, "", new { @class = "text-danger" })
    </div>

    <div>
        <label for="ImageFile">Upload Image</label>
        <input type="file" name="ImageFile" id="ImageFile" class="form-control" />
    </div>

    <div>
        <label for="CategoryId">Category</label>
        <select name="CategoryId" id="CategoryId" class="form-control">
            <option value="">-- Select Category --</option>
            @foreach (var category in Model.AvailableCategories)
            {
                var selected = category.Id == Model.CategoryId ? "selected" : "";
                @:<option value="@category.Id" @(selected)>@category.Name</option>
            }
        </select>
        @* @Html.ValidationMessage("AvailableCategories", "Please select category", new { @class = "text-danger" }) *@
    </div>

    <div class="form-check">
        <input type="checkbox" name="IsVegan" id="IsVegan" class="form-check-input" value="true" @(Model.IsVegan ? "checked" : "") />
        <label for="IsVegan" class="form-check-label">Vegan</label>
    </div>

    <div class="form-check">
        <input type="checkbox" name="IsVegetarian" id="IsVegetarian" class="form-check-input" value="true" @(Model.IsVegetarian ? "checked" : "") />
        <label for="IsVegetarian" class="form-check-label">Vegetarian</label>
    </div>

    <hr />

    <h4>Ingredients</h4>
    @{
        var ingredientsList = Model.RecipeIngredients.ToList(); // Без да променяме IEnumerable
    }
    <div id="ingredients-container">
        @for (int i = 0; i < ingredientsList.Count; i++)
        {
            var currentIngredient = ingredientsList[i];
            <div class="form-row mb-3 border rounded p-3">
                <div class="col">
                    <label>Ingredient</label>
                    <select name="RecipeIngredients[@i].IngredientId" class="form-control ingredient-select" onchange="updateAllergenInfo(this, @i)">
                        <option value="">-- Select Ingredient --</option>
                        @foreach (var ingredient in Model.AvailableIngredients)
                        {
                            var selected = ingredient.Id == currentIngredient.IngredientId ? "selected" : "";
                            @:<option value="@ingredient.Id" @(selected)>@ingredient.Name (@ingredient.Unit, @ingredient.CaloriesPer100g kcal)</option>
                        }
                    </select>
                    <div id="allergen-info-@i" class="mt-1 small"></div>
                </div>
                <div class="col">
                    <label>Quantity</label>
                    <input type="number" name="RecipeIngredients[@i].Quantity" class="form-control" step="0.1" value="@currentIngredient.Quantity" />
                </div>
            </div>
        }
    </div>

    <button type="button" class="btn btn-secondary" onclick="addIngredient()">+ Add Ingredient</button>

    <br /><br />
    <button type="submit" class="btn btn-primary">Create</button>
</form>

@section Scripts {
<script>
    const ingredientData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableIngredients));
    let ingredientIndex = @(Model.RecipeIngredients.Count());

    function addIngredient() {
        const container = document.getElementById("ingredients-container");

        const ingredientOptions = ingredientData.map(i => `
            <option value="${i.Id}">${i.Name} (${i.Unit}, ${i.CaloriesPer100g} kcal)</option>
        `).join('');

        const html = `
        <div class="form-row mb-3 border rounded p-3">
            <div class="col">
                <label>Ingredient</label>
                <select name="RecipeIngredients[${ingredientIndex}].IngredientId" class="form-control ingredient-select" onchange="updateAllergenInfo(this, ${ingredientIndex})">
                    <option value="">-- Select Ingredient --</option>
                    ${ingredientOptions}
                </select>
                <div id="allergen-info-${ingredientIndex}" class="mt-1 small"></div>
            </div>
            <div class="col">
                <label>Quantity</label>
                <input type="number" name="RecipeIngredients[${ingredientIndex}].Quantity" class="form-control" step="0.1" />
            </div>
        </div>
        `;

        container.insertAdjacentHTML('beforeend', html);
        ingredientIndex++;
    }

    function updateAllergenInfo(selectElement, index) {
        const selectedId = selectElement.value;
        const ingredient = ingredientData.find(i => i.Id == selectedId);
        const infoContainer = document.getElementById(`allergen-info-${index}`);

        if (!ingredient) {
            infoContainer.innerHTML = '';
            return;
        }

        if (ingredient.IsAllergen) {
            infoContainer.innerHTML = '<span class="badge bg-danger">⚠ Allergen</span>';
        } else {
            infoContainer.innerHTML = '<span class="badge bg-success">✔ Not Allergen</span>';
        }
    }
</script>
}