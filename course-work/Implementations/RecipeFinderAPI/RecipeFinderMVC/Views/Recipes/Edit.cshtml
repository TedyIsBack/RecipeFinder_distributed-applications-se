@model RecipeFinderMVC.Models.Recipes.EditRecipeModel

@{
	ViewData["Title"] = "Edit Recipe";
}

<h2>Edit Recipe</h2>

<form asp-action="Edit" method="post" enctype="multipart/form-data">
	<input type="hidden" name="Id" value="@Model.Id" />

	<div class="form-group">
		<label for="Name">Name</label>
		<input id="Name" name="Name" class="form-control" value="@Model.Name" />
		<span class="text-danger">@ViewData.ModelState["Name"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
	</div>

	<div class="form-group">
		<label for="Description">Description</label>
		<textarea id="Description" name="Description" class="form-control">@Model.Description</textarea>
		<span class="text-danger">@ViewData.ModelState["Description"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
	</div>

	<div class="form-group">
		<label for="ImageFile">Upload Image</label>
		<input id="ImageFile" name="ImageFile" type="file" class="form-control" />
		<img src="@Model.ImgUrl" alt="Recipe Image" style="max-height: 200px; margin-top: 10px;" />
		<span class="text-danger">@ViewData.ModelState["ImageFile"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
	</div>

	<div class="form-group">
		<label for="PreparationTime">Preparation Time (minutes)</label>
		<input id="PreparationTime" name="PreparationTime" type="number" class="form-control" value="@Model.PreparationTime" />
		<span class="text-danger">@ViewData.ModelState["PreparationTime"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
	</div>


	@Html.CheckBoxFor(m => m.IsVegan, new { @class = "form-check-input" })
	@Html.LabelFor(m => m.IsVegan, new { @class = "form-check-label" })

	@Html.CheckBoxFor(m => m.IsVegetarian, new { @class = "form-check-input" })
	@Html.LabelFor(m => m.IsVegetarian, new { @class = "form-check-label" })


	<div class="form-group">
		<label for="CategoryId">Category</label>
		@Html.DropDownList("CategoryId", new SelectList(Model.AvailableCategories, "Id", "Name", Model.CategoryId), "-- Select Category --", new { @class = "form-control" })
		<span class="text-danger">@ViewData.ModelState["CategoryId"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
	</div>

	<h4>Ingredients</h4>
	<div id="ingredients-list">
		@for (int i = 0; i < Model.RecipeIngredients.Count; i++)
		{
			var ingredient = Model.RecipeIngredients.ElementAt(i);
			<div class="ingredient-item">
				<input type="hidden" name="RecipeIngredients[@i].Id" value="@ingredient.IngredientId" />

				<div class="form-group">
					<label>Ingredient</label>
					@Html.DropDownList($"RecipeIngredients[{i}].IngredientId",
										new SelectList(Model.AvailableIngredients, "Id", "Name", ingredient.IngredientId),
										"-- Select Ingredient --",
										new { @class = "form-control" })
				</div>

				<div class="form-group">
					<label>Quantity</label>
					<input name="RecipeIngredients[@i].Quantity" class="form-control" value="@ingredient.Quantity" />
				</div>

				<button type="button" class="btn btn-danger btn-sm remove-ingredient mt-2">Remove</button>
				<hr />
			</div>

		}
		<button type="button" id="add-ingredient" class="btn btn-sm btn-success mt-2">Add Ingredient</button>


	</div>

	<button  type="submit" class="btn btn-primary">Save</button>
	<a asp-action="MyRecipes" class="btn btn-secondary">Back</a>
</form>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");


	<script>
		let index = @Model.RecipeIngredients.Count;

		function renumberIngredients() {
			const items = document.querySelectorAll('#ingredients-list .ingredient-item');
			items.forEach((item, newIndex) => {
				const ingredientSelect = item.querySelector("select[name^='RecipeIngredients']");
				if (ingredientSelect) {
					ingredientSelect.name = `RecipeIngredients[${newIndex}].IngredientId`;
				}
				const quantityInput = item.querySelector("input[name^='RecipeIngredients'][name$='.Quantity']");
				if (quantityInput) {
					quantityInput.name = `RecipeIngredients[${newIndex}].Quantity`;
				}
				const hiddenId = item.querySelector("input[type='hidden'][name^='RecipeIngredients'][name$='.Id']");
				if (hiddenId) {
					hiddenId.name = `RecipeIngredients[${newIndex}].Id`;
				}
			});
		}

		document.getElementById("add-ingredient").addEventListener("click", function () {
			const container = document.getElementById("ingredients-list");
			const html = `
				<div class="ingredient-item">
					<div class="form-group">
						<label>Ingredient</label>
						<select name="RecipeIngredients[${index}].IngredientId" class="form-control">
							<option value="">-- Select Ingredient --</option>
							@foreach (var ing in Model.AvailableIngredients)
							{
								<text><option value="@ing.Id">@ing.Name</option></text>
							}
						</select>
					</div>
					<div class="form-group">
						<label>Quantity</label>
						<input name="RecipeIngredients[${index}].Quantity" class="form-control" />
					</div>
					<button type="button" class="btn btn-danger btn-sm remove-ingredient mt-2">Remove</button>
					<hr />
				</div>`;
			container.insertAdjacentHTML('beforeend', html);
			index++;
			renumberIngredients();
		});

		document.getElementById("ingredients-list").addEventListener("click", function (e) {
			if (e.target && e.target.classList.contains("remove-ingredient")) {
				e.target.closest(".ingredient-item").remove();
				renumberIngredients();
				index = document.querySelectorAll('#ingredients-list .ingredient-item').length;
			}
		});
	</script>
}


	}
}
